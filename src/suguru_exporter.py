"""
@file: suguru_exporter.py
@brief: Suguru exporter class and methods
@author: Emir Murat
@date: 2025-04-11
@details: This file contains the SuguruExporter class and methods for exporting Suguru puzzles to various formats.
"""

import os
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from src.suguru import check_format, check_difficulty

# Specify the output path for the exported files
standard_path = "outputs/suguru_puzzles.pdf"


def read_config(input_file: str):
    """
    Reads the input file and returns a list of lines.

    :param input_file: Path to the input file.
    :return: List of lines from the input file.
    """
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"Input file {input_file} not found.")

    # Read input file and check for valid format
    with open(input_file, "r") as file:
        lines = file.readlines()
        puzzles = []
        for line in lines:
            line = line.strip()
            if not line:
                continue
            parts = line.split(" ")
            if len(parts) != 3:
                raise ValueError(f"Invalid format in line: {line}. Expected format: <size> <difficulty> <amount>")

            size, difficulty, amount = parts
            print(parts)
            try:
                amount = int(amount)
            except ValueError:
                raise ValueError(f"Invalid amount: {amount}. Expected an integer.")

            # Validate size and difficulty
            check_format(size)
            check_difficulty(difficulty)

            # Generate puzzles
            for _ in range(amount):
                puzzles.append((size, difficulty))

    return puzzles


class SuguruExporter:
    """
    This class is responsible for exporting Suguru puzzles to various formats.
    """

    @staticmethod
    def export_to_pdf(input_file: str, output_path: str = standard_path) -> None:
        """
        Exports the Suguru puzzle to a PDF file based on a regular text file.
        The puzzles are randomly generated and ordered in the pdf file.

        Input file format:
            - The input file should contain a description of amount of puzzles, size of each puzzle, and the difficulty level.
            - Format: <size> <difficulty> <amount> (without brackets)
            - Separate every statement with a new line
            - You can specify a combination of sizes and difficulties that are valid
            - Example: 5x4 easy 3

        :param input_file: input file path
        :param output_path: output file path
        :return: None
        """

        # Parse file
        puzzles = read_config(input_file)

        # Export puzzles to PDF
        my_canvas = canvas.Canvas(output_path, pagesize=A4, bottomup=1)
        width, height = A4

        print(width, height)
        title = "Suguru Puzzles"
        my_canvas.setTitle(title)
        my_canvas.setFont("Helvetica-Bold", 24)
        title_width = my_canvas.stringWidth(title, "Helvetica-Bold", 24)
        my_canvas.drawString((width - title_width) / 2, height - 50, title)

        my_canvas.setFont("Helvetica", 12)
        line_height = 20
        y = height - 100

        for puzzle in puzzles:
            line = puzzle[0] + " - " + puzzle[1]
            line_width = my_canvas.stringWidth(line, "Helvetica", 12)
            my_canvas.drawString((width - line_width) / 2, y, line)
            y -= line_height

        footer = "Generated by SuguruMeister - Author: Emir Murat"
        my_canvas.setFont("Helvetica", 8)
        footer_width = my_canvas.stringWidth(footer, "Helvetica", 8)
        my_canvas.drawString((width - footer_width) / 2, 20, footer)

        my_canvas.save()




